#!/bin/bash

# === Couleurs portables avec tput ===
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
NC=$(tput sgr0)

# === Fonction spinner ===
with_spinner() {
  local cmd="$1"
  local msg="$2"
  echo -ne "${YELLOW}${msg}...${NC}"
  bash -c "$cmd" > /dev/null 2>&1 &
  local pid=$!
  local spinner="/|\\-/"
  local i=0
  while kill -0 $pid 2>/dev/null; do
    i=$(( (i+1) %4 ))
    printf "\r${YELLOW}${msg}... ${spinner:$i:1}${NC}"
    sleep 0.1
  done
  wait $pid
  if [ $? -eq 0 ]; then
    echo -e "\r${GREEN}${msg} : OK ‚úÖ${NC}"
  else
    echo -e "\r${RED}${msg} : √âCHEC ‚ùå${NC}"
    exit 1
  fi
}

# === V√©rifie sudo ===
if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}‚ùå Ce script doit √™tre ex√©cut√© en tant que root (sudo).${NC}"
  exit 1
fi

# === Nettoyage des locks ===
rm -f /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock
rm -f /var/cache/apt/archives/lock /var/lib/apt/lists/lock

# === R√©paration du gestionnaire de paquets ===
echo -ne "${YELLOW}üß∞ V√©rification de l'√©tat du gestionnaire de paquets...${NC}"
dpkg --configure -a > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo -e "\r${YELLOW}üß∞ Probl√®me d√©tect√©. Tentative de r√©paration avec apt...${NC}"
  apt-get install -f -y > /dev/null 2>&1
  dpkg --configure -a > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo -e "\r${RED}üß∞ Impossible de r√©parer automatiquement dpkg. Corrige manuellement avec :${NC}"
    echo -e "${RED}   sudo dpkg --configure -a${NC}"
    exit 1
  else
    echo -e "\r${GREEN}üß∞ dpkg r√©par√© avec succ√®s apr√®s tentative ! ‚úÖ${NC}"
  fi
else
  echo -e "\r${GREEN}üß∞ Gestionnaire de paquets OK ‚úÖ${NC}"
fi

# === Mise √† jour syst√®me ===
with_spinner "apt-get update -y && apt-get upgrade -y" "üîÑ Mise √† jour du syst√®me"

# === curl ===
if ! command -v curl &> /dev/null; then
  with_spinner "apt-get install -y curl" "üì• Installation de curl"
fi

# === Python & pip ===
with_spinner "apt-get install -y python3 python3-pip python3-venv" "üêç Installation de Python, pip et venv"

# === Docker ===
with_spinner "apt-get install -y docker.io docker-compose" "üê≥ Installation de Docker & Compose"

# === SSH ===
with_spinner "apt-get install -y openssh-server" "üîê Installation de SSH"
with_spinner "systemctl enable --now ssh" "üì° Activation de SSH"

# === Configuration s√©curis√©e SSH ===
echo "Port 2222" >> /etc/ssh/sshd_config
echo "PermitRootLogin no" >> /etc/ssh/sshd_config
echo "PasswordAuthentication no" >> /etc/ssh/sshd_config
systemctl restart ssh

# === Environnement Python ===
echo -e "${YELLOW}üì¶ Cr√©ation de l‚Äôenvironnement virtuel Python...${NC}"
python3 -m venv jarvis-env
source jarvis-env/bin/activate
 
# === D√©pendances IA ===
echo -e "${YELLOW}üì¶ Installation des biblioth√®ques IA...${NC}"
pip install --upgrade pip > /dev/null
pip install torch transformers fastapi uvicorn whisper > /dev/null

# === Dockerfile ===
echo -e "${YELLOW}‚öôÔ∏è Cr√©ation du Dockerfile...${NC}"
cat <<EOF > Dockerfile
FROM python:3.11-slim
RUN pip install torch transformers fastapi uvicorn whisper
COPY . /app
WORKDIR /app
CMD ["uvicorn", "server:app", "--host", "0.0.0.0", "--port", "8000"]
EOF

# === docker-compose.yml ===
echo -e "${YELLOW}üìÇ Cr√©ation du fichier docker-compose.yml...${NC}"
cat <<EOF > docker-compose.yml
version: '3.8'
services:
  assistant:
    build: .
    container_name: jarvis
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
    restart: always
EOF

# === Lancement de JARVIS ===
with_spinner "docker-compose up -d" "üöÄ Lancement de l‚Äôassistant JARVIS"

# === Fin ===
echo -e "\n${GREEN}‚ú® Ton assistant JARVIS tourne maintenant sur http://localhost:8000 !${NC}\n"
