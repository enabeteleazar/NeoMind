#!/bin/bash


# --- Nettoyage √©cran (clear)
clear

# --- D√©tection automatique de la prise en charge des couleurs ---
if [ $NO_COLOR -eq 0 ] && [ -t 1 ] && command -v tput >/dev/null 2>&1 && [ "$(tput colors)" -ge 8 ]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'
    YELLOW='\033[0;33m'
    NC='\033[0m' # No Color
else
    RED=''
    GREEN=''
    BLUE=''
    YELLOW=''
    NC=''
fi

spinner() {
    local pid=$1
    local delay=0.1
    local spinstr='|/-\'
    while ps -p "$pid" > /dev/null 2>&1; do
        local temp=${spinstr#?}
        printf " [%c]  " "${spinstr}"
        spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "      \b\b\b\b\b\b"
}

set -e

## ---  VERIFICATION DPKG
    echo -e "${BLUE}üîß V√©rification de l‚Äô√©tat du gestionnaire de paquets...${NC}"
    if sudo dpkg --configure -a > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Gestionnaire de paquets OK.${NC}"
    else
        echo -e "${RED}‚ùå Probl√®me d√©tect√©, tentative de correction...${NC}"
        sudo dpkg --configure -a > /dev/null 2>&1 &
        spinner $!
        echo -e "${GREEN}‚úÖ Correction effectu√©e.${NC}"
    fi


install_jarvis() {

## ---  FULL UPDATE
    echo -e "${BLUE}üîÑ Mise √† jour du syst√®me...${NC}"
    sudo DEBIAN_FRONTEND=noninteractive apt-get update -qq > /dev/null 2>&1 &
    spinner $!
    echo -e "${GREEN}‚úÖ apt-get update termin√©.${NC}"

    sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -y -qq > /dev/null 2>&1 &
    spinner $!
    echo -e "${GREEN}‚úÖ apt-get upgrade termin√©.${NC}"
    echo -e "${BLUE}üîß Installation / mise √† jour de JARVIS...${NC}"

## ---  INSTALL PYTHON & PIP / DOCKER
    sudo apt-get install -y -qq python3 python3-pip python3-venv curl docker.io docker-compose openssh-server > /dev/null 2>&1 &
    spinner $!
    echo -e "${GREEN}‚úÖ D√©pendances install√©s.${NC}"

## ---  INSTALL CURL
    echo -e "${YELLOW}üì¶ V√©rification de curl...${NC}"
    if ! command -v curl >/dev/null 2>&1; then
        sudo apt-get install -y -qq curl > /dev/null 2>&1 &
        spinner $!
        echo -e "${GREEN}‚úÖ curl install√©.${NC}"
    else
        echo -e "${GREEN}‚úÖ curl d√©j√† pr√©sent.${NC}"
    fi

## ---  VERIFICATION FULL-INSTALL
    echo -e "\n${BLUE}üîé V√©rification finale de l'installation...${NC}\n"

## ---  INSTALL DOCKER.IO && DOCKER-COMPOSE
    # V√©rification de Docker
    if command -v docker >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Docker est install√©.${NC}"
    else
        echo -e "${RED}‚ùå Docker n'est PAS install√© correctement.${NC}"
    fi

    # V√©rification de Docker Compose
    if command -v docker-compose >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Docker Compose est install√©.${NC}"
    else
        echo -e "${RED}‚ùå Docker Compose n'est PAS install√© correctement.${NC}"
    fi

# V√©rification du conteneur
if docker ps | grep -q jarvis; then
    echo -e "${GREEN}‚úÖ Le conteneur JARVIS tourne correctement.${NC}"
else
    echo -e "${RED}‚ùå Le conteneur JARVIS ne tourne PAS.${NC}"
    echo -e "${YELLOW}üîÑ Tentative de red√©marrage...${NC}"
    docker-compose up -d
fi


    # Cr√©ation et activation du venv
    echo -e "${GREEN}üì¶ Cr√©ation de l‚Äôenvironnement virtuel Python...${NC}"
    python3 -m venv jarvis-env
    source jarvis-env/bin/activate
    echo -e "${GREEN}‚úÖ Environnement virtuel activ√©.${NC}"

    # Installation des paquets Python
    echo -e "${YELLOW}üì¶ Installation des biblioth√®ques Python...${NC}"
    pip install --upgrade pip > /dev/null 2>&1 &
    spinner $!
    echo -e "${GREEN}‚úÖ pip mis √† jour.${NC}"

    pip install --default-timeout=100 --timeout=100 --retries=10 torch transformers openai-whisper fastapi uvicorn > /dev/null 2>&1 &
    spinner $!
    echo -e "${GREEN}‚úÖ Biblioth√®ques Python install√©es.${NC}"

    # Configuration SSH
    echo -e "${RED}üîê Installation et configuration de SSH...${NC}"
    sudo apt-get install -y -qq openssh-server > /dev/null 2>&1 &
    spinner $!
    echo -e "${GREEN}‚úÖ SSH install√©.${NC}"

    sudo systemctl enable --now ssh > /dev/null 2>&1
    echo -e "${GREEN}‚úÖ SSH activ√©.${NC}"

    echo -e "${GREEN}üîß Configuration avanc√©e de SSH...${NC}"
    {
        echo "Port 2222"
        echo "PermitRootLogin no"
        echo "PasswordAuthentication no"
    } | sudo tee -a /etc/ssh/sshd_config > /dev/null
    sudo systemctl restart ssh > /dev/null 2>&1
    echo -e "${GREEN}‚úÖ Configuration SSH appliqu√©e.${NC}"

    # Cr√©ation Dockerfile
    echo -e "${BLUE}üìÇ Cr√©ation du Dockerfile...${NC}"
    cat <<EOF > Dockerfile
FROM python:3.11-slim
RUN pip install --no-cache-dir \\
    torch \\
    transformers \\
    openai-whisper \\
    fastapi \\
    uvicorn \\
    python-multipart
COPY . /app
WORKDIR /app
CMD ["uvicorn", "server:app", "--host", "0.0.0.0", "--port", "8000"]
EOF
echo -e "${GREEN}‚úÖ Dockerfile cr√©√©.${NC}"

    # Cr√©ation docker-compose.yml
    echo -e "${YELLOW}üìÇ Cr√©ation de docker-compose.yml...${NC}"
    cat <<EOF > docker-compose.yml
version: '3.8'
services:
  assistant:
    build: .
    container_name: jarvis
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
    restart: always
EOF
echo -e "${GREEN}‚úÖ docker-compose.yml cr√©√©.${NC}"

    # Cr√©ation server.py
    echo -e "${BLUE}üìÑ Cr√©ation de server.py...${NC}"
    cat > server.py << 'EOF'
from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.responses import JSONResponse
import uvicorn
import whisper
from transformers import pipeline
import tempfile
import shutil
import os

# --- Initialisation de l'app ---
app = FastAPI(title="Jarvis Assistant API", version="1.0")

# --- Chargement des mod√®les ---
print("üîä Chargement du mod√®le Whisper (transcription)...")
whisper_model = whisper.load_model("base")

print("üß† Chargement du pipeline Transformers (analyse de sentiment)...")
nlp_model = pipeline("sentiment-analysis")

# --- Route racine ---
@app.get("/")
async def root():
    return {"message": "Jarvis est en ligne."}

# --- Route de transcription audio ---
@app.post("/transcribe")
async def transcribe_audio(file: UploadFile = File(...)):
    try:
        with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
            shutil.copyfileobj(file.file, tmp_file)
            tmp_path = tmp_file.name

        result = whisper_model.transcribe(tmp_path)
        transcription = result.get("text", "")

        file.file.close()
        os.remove(tmp_path)

        return {"transcription": transcription}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# --- Route d‚Äôanalyse de texte ---
@app.post("/analyze")
async def analyze_text(text: str):
    try:
        result = nlp_model(text)
        return {"analysis": result}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# --- Ex√©cution directe pour d√©veloppement ---
if __name__ == "__main__":
    uvicorn.run("server:app", host="0.0.0.0", port=8000, reload=True)
EOF
echo -e "${GREEN}‚úÖ server.py cr√©√©.${NC}"

    # Lancement docker-compose
    echo -e "${RED}üöÄ Lancement de l‚Äôassistant...${NC}"
    docker-compose up -d > /dev/null 2>&1 &
    spinner $!
    echo -e "${GREEN}‚úÖ Docker-compose lanc√© avec succ√®s.${NC}"

    # V√©rification de l'acc√®s √† l'API
if curl -s http://localhost:8000 | grep -q "Jarvis"; then
    echo -e "${GREEN}‚úÖ API JARVIS accessible sur http://localhost:8000${NC}"
else
    echo -e "${RED}‚ùå API JARVIS inaccessible.${NC}"
    echo -e "${YELLOW}üîÑ V√©rifie les logs avec :${NC} docker logs jarvis"
fi

echo -e "\n${GREEN}üéâ Installation et validation termin√©es !${NC}\n"

    echo -e "${BLUE}‚úÖ Installation et lancement termin√©s.${NC}"
    echo -e "${BLUE}‚ú® Ton assistant JARVIS tourne maintenant en arri√®re-plan !${NC}"
    echo -e "${BLUE}üëâ Acc√®de √† http://localhost:8000 ou http://<IP_de_ton_serveur>:8000${NC}"
}

check_jarvis() {
    echo -e "${BLUE}üîç V√©rification de l'environnement JARVIS...${NC}"

    echo -e "\n‚öôÔ∏è  V√©rification des outils syst√®me..."
    for tool in python3 pip docker docker-compose ffmpeg curl; do
        if command -v $tool >/dev/null 2>&1; then
            echo -e "‚úÖ $tool est install√©."
        else
            echo -e "‚ùå $tool est manquant."
        fi
    done

    echo -e "\nüì¶ Activation de l‚Äôenvironnement virtuel Python (si disponible)..."
    if [ -f jarvis-env/bin/activate ]; then
        source jarvis-env/bin/activate
        echo -e "‚úÖ Environnement 'jarvis-env' activ√©."
    else
        echo -e "‚ùå Environnement 'jarvis-env' non trouv√©."
    fi

    echo -e "\nüêç V√©rification des biblioth√®ques Python..."
    for pkg in torch transformers whisper fastapi uvicorn python-multipart; do
        python -c "import $pkg" >/dev/null 2>&1 && echo -e "‚úÖ Package Python '$pkg' install√©." || echo -e "‚ùå Package Python '$pkg' NON install√©."
    done

    echo -e "\nüìÇ V√©rification de la structure du projet..."
    for file in server.py Dockerfile docker-compose.yml; do
        [ -f "$file" ] && echo -e "‚úÖ $file pr√©sent." || echo -e "‚ùå $file manquant."
    done

    echo -e "\nüê≥ V√©rification du conteneur Docker..."
    if docker ps --filter "name=jarvis" --filter "status=running" | grep jarvis >/dev/null; then
        echo -e "‚úÖ Conteneur 'jarvis' trouv√©. Statut : running"
    else
        echo -e "‚ùå Conteneur 'jarvis' non trouv√© ou arr√™t√©."
    fi

    echo -e "\nüéôÔ∏è Test du chargement du mod√®le Whisper..."
    python -c "import whisper; whisper.load_model('base')" >/dev/null 2>&1 && echo -e "‚úÖ Mod√®le Whisper charg√© avec succ√®s." || echo -e "‚ùå √âchec du chargement du mod√®le Whisper."

    echo -e "\nüåê Test de l'API JARVIS (http://localhost:8000)..."
    if curl --max-time 5 -s http://localhost:8000 | grep -q 'Jarvis est en ligne'; then
        echo -e "‚úÖ API JARVIS r√©pond bien sur le port 8000."
    else
        echo -e "‚ùå API JARVIS ne r√©pond pas sur http://localhost:8000 (le conteneur est peut-√™tre arr√™t√© ou crash√©)."
    fi

    echo -e "\nüß™ Fin des v√©rifications."
}

# --- Menu ---
while true; do
    echo -e "\n${YELLOW}==== Menu JARVIS ====${NC}"
    echo "1) Installer / R√©installer JARVIS"
    echo "2) V√©rifier l'installation actuelle"
    echo "3) Quitter"
    read -rp "Choisis une option (1-3) : " choice
    case $choice in
        1) install_jarvis ;;
        2) check_jarvis ;;
        3) echo "Bye !" ; exit 0 ;;
        *) echo -e "${RED}Option invalide.${NC}" ;;
    esac
done
